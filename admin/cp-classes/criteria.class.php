<?php/** * * * Zenbership Membership Software * Copyright (C) 2013-2016 Castlamp, LLC * * This program is free software: you can redistribute it and/or modify * it under the terms of the GNU General Public License as published by * the Free Software Foundation, either version 3 of the License, or * (at your option) any later version. * * This program is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. * * You should have received a copy of the GNU General Public License * along with this program.  If not, see <http://www.gnu.org/licenses/>. * * @author      Castlamp * @link        http://www.castlamp.com/ * @link        http://www.zenbership.com/ * @copyright   (c) 2013-2016 Castlamp * @license     http://www.gnu.org/licenses/gpl-3.0.en.html * @project     Zenbership Membership Software */class criteria extends db{    protected $id;    protected $get;    public $data;    public $readable;    public $query;    public $query_count;    public $count;    function __construct($id = '')    {        if (! empty($id)) {            $this->load($id);        }    }    /**     * Load Criteria     */    function load($id)    {        $this->id = $id;        $this->get_criteria($id);        $this->readable();        $this->form_query();        $this->count();    }    /**     * Get Criteria     */    function get_criteria($id)    {        $this->data = $this->get_array("            SELECT *            FROM `ppSD_criteria_cache`            WHERE `id`='" . $this->mysql_clean($id) . "'            LIMIT 1        ");        $this->data['criteria'] = unserialize($this->data['criteria']);        if (empty($this->data['criteria'])) {            echo "0+++Could not find criteria. Your criteria may have expired.";            exit;        }    }    /**     * Make criteria readable     * filter_type     * filter_tables     * filters     */    function readable()    {        $this->readable = "<ul class=\"criteria\">";        $this->readable .= "<li>Type: " . $this->data['type'] . "s</li>";        if ($this->data['inclusive'] == 'or') {            $this->readable .= "<li>Must match any criteria</li>";        } else {            $this->readable .= "<li>Must match all criteria</li>";        }        if (! empty($this->data['criteria']['all']) && $this->data['criteria']['all'] == '1') {            $this->readable .= "<li><b>Scope: All</b></li>";        } else {            $this->readable .= "<li><b>Scope: Specific</b></li>";            //$this->form_query();            $this->readable .= $this->prepare_query('', '1');        }        $this->form_query();        $this->readable .= "<li><b>Full Query</b></li>";        $this->readable .= $this->query;        $this->readable .= "</ul>";    }    /**     * Builds the actual MySQL query.     */    function form_query()    {        // Tables        $table3      = '';        $join_match3 = '';        if ($this->data['type'] == 'member') {            $table1     = 'ppSD_members';            $table2     = 'ppSD_member_data';            $join_match = 'member_id';            $select     = '*';        }        else if ($this->data['type'] == 'contact') {            $table1     = 'ppSD_contacts';            $table2     = 'ppSD_contact_data';            $join_match = 'contact_id';            $select     = '*';        }        else if ($this->data['type'] == 'transaction') {            $table1      = 'ppSD_cart_sessions';            $table2      = 'ppSD_cart_session_totals';            $join_match  = 'id';            $table3      = 'ppSD_shipping';            $join_match3 = 'cart_session';            $select      = 'ppSD_cart_sessions.*,ppSD_cart_session_totals.*,ppSD_shipping.company_name,ppSD_shipping.name ,ppSD_shipping.first_name,ppSD_shipping.last_name,ppSD_shipping.address_line_1,ppSD_shipping.address_line_2,ppSD_shipping.city,ppSD_shipping.state,ppSD_shipping.zip,ppSD_shipping.country,ppSD_shipping.phone,ppSD_shipping.email,ppSD_shipping.ship_directions,ppSD_shipping.shipped,ppSD_shipping.ship_date,ppSD_shipping.trackable,ppSD_shipping.shipping_number,ppSD_shipping.shipping_provider,ppSD_shipping.remarks';        }        else if ($this->data['type'] == 'rsvp') {            $table1     = 'ppSD_event_rsvps';            $table2     = 'ppSD_event_rsvp_data';            $join_match = 'rsvp_id';            $select     = '*';        }        else if ($this->data['type'] == 'campaign') {            $table1     = 'ppSD_campaign_subscriptions';            $table2     = '';            $join_match = '';            $select     = '*';        }        else {            $table1     = 'ppSD_accounts';            $table2     = 'ppSD_account_data';            $join_match = 'account_id';            $select     = '*';        }        // Criteria        /**         * JOIN " . $table2 . "         * ON " . $table1 . ".id=" . $table2 . "." . $join_match . "         */        if (! empty($this->data['criteria']['all']) && $this->data['criteria']['all'] == '1') {            if (empty($table2)) {                $this->query       = "                    SELECT $select                    FROM `" . $table1 . "`                    WHERE 1                ";                $this->query_count = "                    SELECT COUNT(*)                    FROM `" . $table1 . "`                    WHERE 1                ";            } else {                if (empty($table3)) {                    $this->query       = "                        SELECT $select                        FROM `" . $table1 . "`                        LEFT JOIN " . $table2 . "                        ON " . $table1 . ".id=" . $table2 . "." . $join_match . "                        WHERE 1                    ";                    $this->query_count = "                        SELECT COUNT(*)                        FROM `" . $table1 . "`                        LEFT JOIN " . $table2 . "                        ON " . $table1 . ".id=" . $table2 . "." . $join_match . "                        WHERE 1                    ";                } else {                    $this->query       = "                        SELECT $select                        FROM `" . $table1 . "`                        LEFT JOIN " . $table2 . "                        ON " . $table1 . ".id=" . $table2 . "." . $join_match . "                        LEFT JOIN " . $table3 . "                        ON " . $table1 . ".id=" . $table3 . "." . $join_match3 . "                        WHERE 1                    ";                    $this->query_count = "                        SELECT COUNT(*)                        FROM `" . $table1 . "`                        LEFT JOIN " . $table2 . "                        ON " . $table1 . ".id=" . $table2 . "." . $join_match . "                        LEFT JOIN " . $table3 . "                        ON " . $table1 . ".id=" . $table3 . "." . $join_match3 . "                        WHERE 1                    ";                }            }        } else {            if (empty($table2)) {                $this->query       = "                    SELECT $select                    FROM `" . $table1 . "`                ";                $this->query_count = "                    SELECT COUNT(*)                    FROM `" . $table1 . "`                ";            } else {                if (empty($table3)) {                    $this->query       = "                        SELECT $select                        FROM `" . $table1 . "`                        JOIN " . $table2 . "                        ON " . $table1 . ".id=" . $table2 . "." . $join_match . "                    ";                    $this->query_count = "                        SELECT COUNT(*)                        FROM `" . $table1 . "`                        JOIN " . $table2 . "                        ON " . $table1 . ".id=" . $table2 . "." . $join_match . "                    ";                } else {                    $this->query       = "                        SELECT $select                        FROM `" . $table1 . "`                        LEFT JOIN " . $table2 . "                        ON " . $table1 . ".id=" . $table2 . "." . $join_match . "                        LEFT JOIN " . $table3 . "                        ON " . $table1 . ".id=" . $table3 . "." . $join_match3 . "                    ";                    $this->query_count = "                        SELECT COUNT(*)                        FROM `" . $table1 . "`                        LEFT JOIN " . $table2 . "                        ON " . $table1 . ".id=" . $table2 . "." . $join_match . "                        LEFT JOIN " . $table3 . "                        ON " . $table1 . ".id=" . $table3 . "." . $join_match3 . "                    ";                }            }            $where = $this->prepare_query($table1, '0');            if ($this->data['inclusive'] == 'or') {                $where = substr($where, 4);            } else {                $where = substr($where, 5);            }            $this->query .= " WHERE " . $where;            $this->query_count .= " WHERE " . $where;        }    }    /**     * Runs through the parameters and adds     * them to the query.     *     * @param string $table1     * @param string $readable     *     * @return string     */    function prepare_query($table1 = '', $readable = '0')    {        $where = '';        foreach ($this->data['criteria'] as $name => $value) {            if ($value == '0') {                $value = '-';            }            if (!empty($value) && $name != 'all' && $value != '0' && $value != 'http://') {                if ($value == '-') {                    $value = '0';                }                $prev_name = $name;                $plain_name = str_replace('_low', '', $name);                $plain_name = str_replace('_high', '', $plain_name);                if ($prev_name == $plain_name) {                    $inc = ' OR ';                } else {                    $inc = ' AND ';                }                if (sizeof($value) > 1) {                    if ($readable != '1') {                        $where .= ' ' . $this->data['inclusive'];                    }                    $where .= ' ' . $this->form_sub_statement_loop($table1, $name, $value, $readable);                } else {                    if ($readable != '1') {                        $where .= ' ' . $this->data['inclusive'];                    }                    $where .= ' ' . $this->form_sub_statement($table1, $name, $value['0'], $readable);                }            }        }        return $where;    }    function form_sub_statement_loop($table1, $name, $value, $readable = '0')    {        $statement = '(';        $sub_inner = '';        foreach ($value as $subitem) {            if (! empty($subitem['range'])) {                $inc = ' AND ';            } else {                $inc = ' OR ';            }            // Changed from OR to AND - 10/24/2013            // OR for date ranges            // AND for non-date ranges.            $sub_inner .= $inc . $this->form_sub_statement($table1, $name, $subitem, $readable);        }        $sub_inner = substr($sub_inner, 4);        $statement .= $sub_inner . ')';        return $statement;    }    function form_sub_statement($table1, $name, $value, $readable = '0')    {        $equator = $value['eq'];        if ($equator == 'eq') {            $name_is = ' equals ';            $use_sim = '=';        } else if ($equator == 'neq') {            $name_is = ' does not equals ';            $use_sim = '!=';        } else if ($equator == 'gt') {            $name_is = ' > ';            $use_sim = '>';        } else if ($equator == 'lt') {            $name_is = ' < ';            $use_sim = '<';        } else if ($equator == 'gte') {            $name_is = ' >= ';            $use_sim = '>=';        } else if ($equator == 'lte') {            $name_is = ' <= ';            $use_sim = '<=';        } else {            $name_is = ' similar to ';            $use_sim = ' LIKE ';        }        if (empty($value['table'])) {            $table = $table1;        } else {            $table = $value['table'];        }        if (strpos($name, '_low')) {            if (empty($this->data['criteria']['filter_tables'][$name])) {                $table = $table1;            } else {                $table = $this->data['criteria']['filter_tables'][$name];            }            $plain_name = str_replace('_low', '', $name);            $plain_name = str_replace('_high', '', $plain_name);            $skip       = '0';            $name_is    = ' between ';            $low_val    = $value[$name];            $high_val   = $value[$plain_name . '_high'];            // Add where            if (empty($low_val) && !empty($high_val)) {                if ($readable == '1') {                    $where = '<br />' . $plain_name . ' less than or equal to ' . $high_val;                } else {                    $where = " " . $this->data['inclusive'] . " (" . $table . "." . $plain_name . "<=" . "'";                    $where .= $this->mysql_cleans($high_val);                    $where .= "')";                }            }            else if (empty($high_val) && !empty($low_val)) {                if ($readable == '1') {                    $where = '<br />' . $plain_name . ' greater than or equal to ' . $low_val;                } else {                    $where = " " . $this->data['inclusive'] . " (" . $table . "." . $plain_name . ">=" . "'";                    $where .= $this->mysql_cleans($low_val);                    $where .= "')";                }            }            else {                if ($readable == '1') {                    $where = '<br />' . $plain_name . ' greater than or equal to ' . $low_val;                    $where = '<br />' . $plain_name . ' less than or equal to ' . $high_val;                }                else {                    $where = " " . $this->data['inclusive'] . " (" . $table . "." . $plain_name . ">=" . "'";                    $where .= $this->mysql_cleans($low_val);                    $where .= "' AND " . $table . "." . $plain_name . "<=" . "'";                    $where .= $this->mysql_cleans($high_val);                    $where .= "')";                }            }        }        else if (strpos($name, '_high')) {            // ... nothing ...        }        else {            if ($readable == '1') {                $where = '<LI>' . $name . ' ' . $use_sim . ' ' . $value['value'] . '</LI>';            } else {                if ($use_sim == ' LIKE ') {                    $value['value'] = '%' . $value['value'] . '%';                }                $where = $table . '.' . $name . ' ' . $use_sim . ' ' . "'" . $this->mysql_cleans($value['value']) . "'";            }        }        return $where;    }    function count()    {        $count       = $this->get_array($this->query_count);        $this->count = $count['0'];    }    function preview()    {        if ($this->data['criteria']['all'] == '1') {            if ($this->data['type'] == 'member') {                $list = '<div id="crit_preview" class="pad24">All members.</div>';            } else if ($this->data['type'] == 'contact') {                $list = '<div id="crit_preview" class="pad24">All contact.</div>';            } else if ($this->data['type'] == 'rsvp') {                $list = '<div id="crit_preview" class="pad24">All event registrations.</div>';            } else if ($this->data['type'] == 'account') {                $list = '<div id="crit_preview" class="pad24">All accounts.</div>';            }        } else {            // Preview list settings            if ($this->data['type'] == 'member') {                $preview_fields = explode(',', $this->get_option('preview_members'));            }            else if ($this->data['type'] == 'contact') {                $preview_fields = explode(',', $this->get_option('preview_contacts'));            }            else if ($this->data['type'] == 'rsvp') {                $preview_fields = explode(',', $this->get_option('preview_rsvps'));            }            else {                $preview_fields = explode(',', $this->get_option('preview_accounts'));            }            // Begin table            $list = '<div id="crit_preview" class="popupbody">';            $list .= '<table cellspacing=0 cellpadding=0 border=0 class="tablesorter listings">';            $list .= '<thead><tr>';            foreach ($preview_fields as $item) {                $list .= '<th>' . strtoupper($item) . '</th>';            }            $list .= '</tr></thead>';            $list .= '<tbody>';            if ($this->count > 0) {                $STH = $this->run_query($this->query);                while ($row = $STH->fetch()) {                    $list .= '<tr>';                    foreach ($preview_fields as $item) {                        $list .= '<td>' . $row[$item] . '</td>';                    }                    $list .= '</tr>';                }            } else {                $list .= '<td class="weak" colspan="6">No results.</td>';            }            $list .= '</tbody>';            $list .= '</table></div>';        }        return $list;    }    function create($filters, $name, $save, $inclusive, $type, $act, $public = '1', $act_id = '')    {        global $employee;        $id = $this->insert("            INSERT INTO `ppSD_criteria_cache` (                `criteria`,                `save`,                `name`,                `type`,                `act`,                `date`,                `inclusive`,                `public`,                `owner`,                `act_id`            )            VALUES (                '" . $this->mysql_clean(serialize($filters)) . "',                '" . $this->mysql_clean($save) . "',                '" . $this->mysql_clean($name) . "',                '" . $this->mysql_clean($type) . "',                '" . $this->mysql_clean($act) . "',                '" . current_date() . "',                '" . $this->mysql_clean($inclusive) . "',                '" . $this->mysql_clean($public) . "',                '" . $this->mysql_clean($employee['id']) . "',                '" . $this->mysql_clean($act_id) . "'            )        ");        $this->load($id);        return $id;    }    function delete_criteria($id)    {        $q1 = $this->delete("            DELETE FROM `ppSD_criteria_cache`            WHERE `id`='" . $this->mysql_clean($id) . "'            LIMIT 1        ");    }    /*     * THIS NO LONGER WORKS! DO NOT USE THIS TOOL!     * New function: $filters = $admin->build_criteria_filters($_POST);     *     * Takes slider filters     * and converts them to     * standard filter arrays.     * Example: SYC336382||event_id||eq||ppSD_event_rsvps     *     * @param array $data     * @param enum $type 'member', 'contact', 'rsvp', 'account'     * @param string $name Optional name.     * @param enum $act 'email', 'search', 'campaign', 'other'     */    function build_filters($Gdata, $type, $act, $name = '')    {        $filters       = array();        $filter_types  = array();        $filter_tables = array();        if (empty($Gdata)) {            $all = '1';        } else {            $all = '0';            foreach ($Gdata as $Gname => $Gvalue) {                if ($Gname == '-') {                    $Gname = '0';                }                if ($Gname == 'use_advanced') {                    continue;                } else {                    $exp = explode('||', $Gvalue);                    if ($exp['0'] == '-') {                        $exp['0'] = '0';                    }                    $filters[$exp['1']]       = $exp['0'];                    $filter_types[$exp['1']]  = $exp['2'];                    $filter_tables[$exp['1']] = $exp['3'];                }            }        }        // Filters array        $final_filters = array(            'all'           => $all,            'filter'        => $filters,            'filter_type'   => $filter_types,            'filter_tables' => $filter_tables,        );        $admin = new admin;        $final_filters = $admin->build_criteria_filters($final_filters);        $crit_id       = $this->create($final_filters, $name, '0', 'AND', $type, $act);        return $crit_id;    }}